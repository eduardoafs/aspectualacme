/*
 * generated by Xtext
 */
package dimap.ufrn.br.formatting;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;

import dimap.ufrn.br.services.AspectualAcmeGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class AspectualAcmeFormatter extends AbstractDeclarativeFormatter {

	@Override
	protected void configureFormatting(FormattingConfig c) {
		AspectualAcmeGrammarAccess f = (AspectualAcmeGrammarAccess) getGrammarAccess();

		// find common keywords an specify formatting for them
		/*for (Keyword comma : f.findKeywords(",")) {
			c.setNoSpace().before(comma);
		}*/
		for (Keyword pontoVirgula : f.findKeywords(";")) {
			c.setNoSpace().before(pontoVirgula);
			c.setLinewrap().after(pontoVirgula);
		}
		// formatting for grammar rule TestIndentation
		for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("{", "}")) {
			 c.setIndentation(pair.getFirst(), pair.getSecond());
			 c.setLinewrap().after(pair.getFirst());
			 c.setLinewrap().after(pair.getSecond());
		}
		
	}
	// It's usually a good idea to activate the following three statements.
	// They will add and preserve newlines around comments
	// c.setLinewrap(0, 1, 2).before(getGrammarAccess().getSL_COMMENTRule());
	// c.setLinewrap(0, 1, 2).before(getGrammarAccess().getML_COMMENTRule());
	// c.setLinewrap(0, 1, 1).after(getGrammarAccess().getML_COMMENTRule());

}
